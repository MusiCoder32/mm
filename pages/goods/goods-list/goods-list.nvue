<template>
	<div class="content">
		<header>
			<div class="header">
				<div class="target" v-for="(target, index) in orderbyList" :key="index" @click="select(index)" :class="[target.selected ? 'target-on' : 'target-on1']">
					<text class="target-text" :class="[target.selected ? 'target-text-on' : '']">{{ target.text }}</text>
					<text v-if="target.orderbyicon" class="target-icon" :class="[target.selected ? 'target-text-on' : '']">{{ target.orderbyicon[target.orderIndex] }}</text>
				</div>
			</div>
		</header>

		<div class="place"></div>

		<view v-if="noResult" class="no-result">
			<view>
				<text class="target-text">没有找到“{{catName}}”相关的商品</text>
			</view>
			<view>
				<text class="no-result-text">建议:</text>
				<view>
					<text class="no-result-text">1.请尝试其它的关键字</text>
					<text class="no-result-text">2.在分类列表中找到自己喜爱的商品</text>
				</view>
			</view>
		</view>

		<waterfall class="goods-list" column-count="2" column-width="auto">
			<refresh class="refresh" @refresh="onrefresh" @pullingdown="onpullingdown" :display="refreshing ? 'show' : 'hide'">
				<text class="refresh-indicator-text">{{ refreshText }}</text>
				<loading-indicator class="refresh-indicator"></loading-indicator>
			</refresh>
			<cell style="align-items:flex-start;" v-for="goods in goodsList" :key="goods.goods_id">
				<view class="product" @click="toGoods(goods)">
					<text class="product-name">{{ goods.goods_name }}</text>
					<image class="product-image" mode="widthFix" :src="rootPath + goods.imagePath"></image>
					<view class="product-info">
								<view v-if="goods.type==1" class="price">{{'￥'+goods.market_price}}</view>
								<view v-if="goods.type==3" class="price">积分:{{goods.integral_price}}</view>
								<view v-if="goods.type==2" class="price" style="display: flex;justify-content: flex-e;flex-direction: row;">
									<text class="product-info-price">{{ '￥'+goods.market_price }}</text>
									<text style="font-size: 30upx;padding-top:7upx">/</text>
									<image src="/static/img/icon/dou.png" style="width:40upx;height:40upx" mode=""></image>
									<text class="product-info-price" style="padding-top:7upx">{{ goods.price }}</text>
								</view>
						<text class="product-info-slogan">{{ goods.sales_volume }}人已付款</text>
					</view>
				</view>
			</cell>
			<loading class="loading" @loading="onloading" :display="loadinging ? 'show' : 'hide'">
				<text class="loading-indicator-text">{{loadingText}}</text>
				<loading-indicator class="loading-indicator"></loading-indicator>
			</loading>
		</waterfall>
	</div>
</template>

<script>
	import HttpApi from '../../../common/httpApi.js'
	import ROOTPATH from '../../../common/config.js'
	var _self
	export default {
		data() {
			return {
				page: 1, //查询数据页数，后台默认每页十条
				noResult: false,
				goodsListQueryData: {},
				rootPath: '',
				refreshText: '下拉刷新',
				refreshing: false,
				loadinging: false,
				loadingText: '上拉加载',
				orderbyList: [{
						text: '销量',
						selected: true,
						orderbyicon: ['\ue737', '\ue736'],
						orderby: 'sales_volume',
						orderIndex: 0
					},
					{
						text: '价格',
						selected: false,
						orderbyicon: ['\ue737', '\ue736'],
						orderby: 'price',
						orderIndex: 0
					},
					// { text: '好评', selected: false, orderbyicon: false, orderby: 0 }
				],
				goodsList: [],
				catName: ''
			};
		},
		beforeCreate() {
			const domModule = weex.requireModule('dom');
			domModule.addRule('fontFace', {
				fontFamily: 'iconfont',
				src: "url('https://at.alicdn.com/t/font_1087442_fe5vigfwr5m.ttf')"
			});
		},
		created() {
			uni.showLoading({
				mask:true
			})
			_self = this;
			_self.goodsListQueryData = {
				orderby: 'sales_volume',
				sort: 'asc'
			};
			//合并缓存中的搜索条件
			Object.assign(_self.goodsListQueryData, uni.getStorageSync('queryData'))
			this.rootPath = ROOTPATH.APIHOST + ROOTPATH.IMGPATH
			this.httpRequest(_self.goodsListQueryData)
		},
		mounted() {
			// nvue页面下，关闭下拉刷新，用waterfall实现下拉和上拉刷新。
			const currentWebview = getCurrentPages()[getCurrentPages().length - 1].$getAppWebview();
			currentWebview.setStyle({
				pullToRefresh: {
					support: false
				},
			});
			this.init();
		},
		methods: {
			httpRequest(data, add = false) {
				let header = "application/x-www-form-urlencoded";
				let url = ROOTPATH.APIHOST + ROOTPATH.APIPATH + HttpApi.home.goodsList;
				uni.request({
					url: url,
					data: data,
					method: "GET",
					header: {
						"content-type": header,
						'token':uni.getStorageInfoSync('token')
					},
					success: function(result) {
						if (result.data.code != 0) {
							uni.showToast({
								title: result.msg,
								icon: 'none'
							})
						}
						// 关闭刷新
						if (_self.refreshing) {
							_self.refreshing = false
						}
						// 关闭上拉
						if (_self.loadinging) {
							_self.loadinging = false
						}
						// 判断是增加数据还是更新数据
						if (add) {
							_self.goodsList.push(result.data.data.data)
						} else {
							_self.goodsList = result.data.data.data
						}
						//是否展示查询不到界面
						_self.noResult = !_self.goodsList.length
					},
					fail: function(e) {
						uni.hideLoading()
						uni.showToast({
							title: '通信异常，请稍后再试',
							icon: 'none'
						})
						console.log(e)
					},
					complete: () => {
						uni.hideLoading()
					}
				})
			},
			init() {
				this.setTitle();
			},
			setTitle() {
				//设置标题
				this.catName = uni.getStorageSync('catName');
				uni.setNavigationBarTitle({
					title: this.catName
				});
			},
			select(index) {
				uni.showLoading({
					mask: true
				})
				if (this.orderbyList[index].orderbyicon) {
					if (this.orderbyList[index].selected) {
						this.orderbyList[index].orderIndex = this.orderbyList[index].orderIndex == 0 ? 1 : 0;
					}
				}
				this.orderbyList[index].selected = true;
				let len = this.orderbyList.length;
				for (let i = 0; i < len; i++) {
					if (i != index) {
						this.orderbyList[i].selected = false;
					}
				}
				_self.goodsListQueryData.orderby = this.orderbyList[index].orderby
				_self.goodsListQueryData.sort = this.orderbyList[index].orderIndex ? 'desc' : 'asc'
				this.httpRequest(_self.goodsListQueryData)
			},
			onrefresh(event) {
				this.refreshText = '正在刷新';
				this.refreshing = true
				this.page = 1;
				this.goodsListQueryData.page = this.page;
				this.httpRequest(_self.goodsListQueryData)
			},
			onpullingdown(event) {},
			onloading(event) {
				this.loadingText = '正在加载';
				this.loadinging = true;
				if (this.goodsList.length >= this.page * 10) {
					this.page += 1;
				}
				this.goodsListQueryData.page = this.page;
				this.httpRequest(_self.goodsListQueryData)
			},
			//商品跳转
			toGoods(e) {
				//存储商品默认展示图
				uni.setStorageSync('imagePath', e.imagePath)
				uni.navigateTo({
					url: '/pages/goods/goods?goods_id=' + e.goods_id
				});
			}
		}
	};
</script>

<style>
	.no-result {
		padding: 30px 0 0 30px;
	}

	.no-result-suggest {
		color: #666;
	}

	.no-result-text {
		padding-left: 60px;
		margin-top: 20px;
		color: #999;
		font-size: 24px;
	}

	.content {
		flex-direction: column;
	}

	.header {
		width: 750px;
		height: 79px;
		flex-direction: row;
		justify-content: space-around;
		align-items: flex-end;
		position: fixed;
		z-index: 99;
		background-color: #fff;
		top: 0;
		z-index: 10;
		border-bottom-width: 1px;
		border-bottom-style: solid;
		border-bottom-color: #eee;
	}

	.target {
		width: 150px;
		height: 60px;
		flex-direction: row;
		justify-content: center;
		align-items: center;
		margin-bottom: -2px;
		border-bottom-color: #fff;
	}

	.target-on {
		border-bottom-width: 4px;
		border-bottom-style: solid;
		border-bottom-color: #f06c7a;
	}

	.target-text {
		color: #aaa;
		font-size: 30px;
	}

	.target-text-on,
	.target-icon-on {
		color: #555;
		font-weight: 600;
	}

	.target-icon {
		color: #aaa;
		font-family: iconfont;
	}

	.place {
		background-color: #ffffff;
		height: 80px;
	}


	.goods-list {
		justify-content: flex-end !important;
		width: 750px;
		padding: 0 30px 30px 30px;
		background-color: #ffffff;
	}

	.product {
		width: 335px;
		border-radius: 20px;
		background-color: #fff;
		margin: 20px 0 0 0;
		box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
	}

	.product-image {
		width: 335px;
		height: 335px;
		border-top-left-radius: 20px;
		border-top-right-radius: 20px;
	}

	.product-name {
		width: 335px;
		padding: 10px 13px;
		text-align: center;
		overflow: hidden;
		font-size: 30px;
	}

	.product-info {
		flex-direction: column;
		justify-content: flex-start;
		align-items: flex-end;
		width: 335px%;
		padding: 10px 13px;
	}

	.product-info-price {
		color: #e65339;
		font-size: 30px;
		font-weight: 600;
	}

	.product-info-slogan {
		color: #807c87;
		font-size: 24px;
	}

	.refresh {
		width: 690;
		height: 150;
		margin-top: -50;
		align-items: center;
		justify-content: center;
	}

	.refresh-indicator-text {
		color: #888888;
		font-size: 30px;
		text-align: center;
	}

	.refresh-indicator {
		height: 60px;
		width: 60px;
		color: #000;
	}

	.loading {
		width: 690;
		height: 120;
		flex-direction: row;
		align-items: center;
		justify-content: center;
	}

	.loading-indicator-text {
		color: #888888;
		font-size: 30px;
		text-align: center;
	}

	.loading-indicator {
		height: 60px;
		width: 60px;
		color: #000;
	}
</style>
